import 'dart:io';

import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:expense_tracker/models/expense.dart';

class DatabaseHelper {
  // variables
  static const _dbName = 'expenseDatabse.db';
  static const _dbVersion = 1;
  static const _tableName = 'expense';

  static const String expenseId = '_id';
  static const String title = '_title';
  static const double amount = 0.0;
  static final DateTime date = DateTime(2000);
  static const Category category = Category.food;

  // making it a singleton class
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  // if database isnt null, return database, if it is initialize and create database
  static Database? _database;
  Future<Database> get database async {
    if (_database != null) {
      return _database!;
    } else {
      _database = await _initiateDatabase();
      return _database!;
    }
  }

  _initiateDatabase() async {
    Directory directory = await getApplicationDocumentsDirectory();
    String path = join(directory.path, _dbName);
    await openDatabase(path, version: _dbVersion, onCreate: _onCreate);
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
    CREATE TABLE $_tableName (
      $expenseId INTEGER PRIMARY KEY,
      $title TEXT NOT NULL,
      $amount REAL NOT NULL,
      $date TEXT NOT NULL,
      $category TEXT NOT NULL
    )
  ''');
  }

  Future<int> insert(Map<String, dynamic> row) async {
    Database db = await instance.database;
    return await db.insert(_tableName, row);
  }

  Future<List<Map<String, dynamic>>> queryAll() async {
    Database db = await instance.database;
    return await db.query(_tableName);
  }

  Future update(Map<String, dynamic> row) async {
    Database db = await instance.database;
    int id = row[expenseId];
    return await db.update(_tableName, row, where: '$id = ?', whereArgs: [id]);
  }

  Future<int> delete(int id) async {
    Database db = await instance.database;
    return await db.delete(_tableName, where: '$expenseId = ?', whereArgs: [id]);
  }
}
